**Papers:**
	* Some great debugging stories: danluu/debugging-stories :(https://github.com/danluu/debugging-stories)
	* What every programmer should know about Memory by Ulrich Drepper. :(http://ftp.linux.org.ua/pub/docs/developer/general/cpumemory.pdf :(http://ftp.linux.org.ua/pub/docs/developer/general/cpumemory.pdf)
	* What every programmer should know about floating point arithmetic by David Goldberg :(https://ece.uwaterloo.ca/~dwharder/NumericalAnalysis/02Numerics/Double/paper.pdf (https://ece.uwaterloo.ca/~dwharder/NumericalAnalysis/02Numerics/Double/paper.pdf)
	* A link to really good list of CS papers papers-we-love/papers-we-love :(https://github.com/papers-we-love/papers-we-love)
	* Futexes are tricky. :(http://dept-info.labri.fr/~denis/Enseignement/2008-IR/Articles/01-futex.pdf) :(http://dept-info.labri.fr/~denis/Enseignement/2008-IR/Articles/01-futex.pdf)
**Some other basic resources:**
	* System Address Map Initialization in x86/x64 Architecture Part 1: PCI-Based Systems - InfoSec Institute :(http://resources.infosecinstitute.com/system-address-map-initialization-in-x86x64-architecture-part-1-pci-based-systems/)
	* System Address Map Initialization in x86/x64 Architecture Part 2: PCI Express-Based Systems - InfoSec Institute :(http://resources.infosecinstitute.com/system-address-map-initialization-x86x64-architecture-part-2-pci-express-based-systems/)
	* What Your Computer Does While You Wait :(http://duartes.org/gustavo/blog/post/what-your-computer-does-while-you-wait)
	* Motherboard Chipsets and the Memory Map :(http://duartes.org/gustavo/blog/post/motherboard-chipsets-memory-map)
	* How Computers Boot Up :(http://duartes.org/gustavo/blog/post/how-computers-boot-up)
	* The Kernel Boot Process :(http://duartes.org/gustavo/blog/post/kernel-boot-process)
	* Anatomy of a Program in Memory :(http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory)
	* How The Kernel Manages Your Memory :(http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory)
	* Page Cache, the Affair Between Memory and Files :(http://duartes.org/gustavo/blog/post/page-cache-the-affair-between-memory-and-files)
	* Memory Translation and Segmentation :(http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation)
	* Getting Physical With Memory :(http://duartes.org/gustavo/blog/post/getting-physical-with-memory)
	* CPU Rings, Privilege, and Protection :(http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection)
	* Cache: a place for concealment and safekeeping :(http://duartes.org/gustavo/blog/post/intel-cpu-caches)
	* Journey to the Stack, Part I :(http://duartes.org/gustavo/blog/post/journey-to-the-stack/)
	* Epilogues, Canaries, and Buffer Overflows :(http://duartes.org/gustavo/blog/post/epilogues-canaries-buffer-overflows/)
	* Tail Calls, Optimization, and ES6 :(http://duartes.org/gustavo/blog/post/tail-calls-optimization-es6/)
	* How is a page walk implemented? :(https://www.quora.com/How-is-a-page-walk-implemented/answer/Abhiroop-Dabral)
	* Bit Twiddling Hacks :(http://graphics.stanford.edu/~seander/bithacks.html)
	* Great articles related to Linkers and Loaders. :(http://eli.thegreenplace.net/category/programming/linkers-and-loaders/)
	* Everything about x86: 'x86' tag wiki :(https://stackoverflow.com/tags/x86/info)
	* Windows Kernel: Vergilius Project :(https://www.vergiliusproject.com/)
**Books/Manuals**:
	* Intel 64 and IA-32 Architectures Developer’s Manual: Vol. 3A :(http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html)
	* AMD64 Architecture Programmer’s Manual Volume 2:System Programming :(http://support.amd.com/us/Embedded_TechDocs/24593.pdf)
	* Assembly Language Step-by-Step: Programming with Linux: Jeff Duntemann: 9780470497029: Amazon.com: Books :(http://www.amazon.com/Assembly-Language-Step-Step-Programming/dp/0470497025)
	* Understanding the Linux Kernel, Third Edition: Daniel P. Bovet, Marco Cesati Ph.D.: 9780596005658: Amazon.com: Books :(http://www.amazon.com/Understanding-Linux-Kernel-Third-Daniel/dp/0596005652)
	* Linux Kernel Development (3rd Edition): Robert Love: 9780672329463: Amazon.com: Books :(http://www.amazon.com/Linux-Kernel-Development-Robert-Love/dp/0672329468)
	* Linux System Programming: Talking Directly to the Kernel and C Library: Robert Love: 9780596009588: Amazon.com: Books :(http://www.amazon.com/Linux-System-Programming-Talking-Directly/dp/0596009585)
	* Amazon.com: What Makes It Page?: The Windows 7 (x64) Virtual Memory Manager (9781479114290): Enrico Martignetti: Books :(http://www.amazon.com/What-Makes-It-Page-Windows/dp/1479114294)
	* Understanding the Linux Virtual Memory Manager - (https://www.kernel.org/doc/gorman/)
	* Architectural and Operating System Support for Virtual Memory (Synthesis Lectures on Computer Architecture) :(https://www.amazon.com/dp/1627056025/ref=cm_sw_em_r_mt_dp_U_LKlqDbJA5JKMQ)
	* Hardware and Software Support for Virtualization (Synthesis Lectures on Computer Architecture) :(https://www.amazon.com/dp/1627056939/ref=cm_sw_em_r_mt_dp_U_4KlqDbF7QP8CX)

